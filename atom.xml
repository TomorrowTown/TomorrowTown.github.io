<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://TomorrowTown.github.io</id>
    <title>tomorrow</title>
    <updated>2020-12-08T17:01:52.641Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://TomorrowTown.github.io"/>
    <link rel="self" href="https://TomorrowTown.github.io/atom.xml"/>
    <subtitle>&quot;我猪肉佬何尝不想当一个伟大的舞蹈家&quot;</subtitle>
    <logo>https://TomorrowTown.github.io/images/avatar.png</logo>
    <icon>https://TomorrowTown.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, tomorrow</rights>
    <entry>
        <title type="html"><![CDATA[Go语言并发编程模型(九) -- context]]></title>
        <id>https://TomorrowTown.github.io/post/2020-12-9-golang-basics-context/</id>
        <link href="https://TomorrowTown.github.io/post/2020-12-9-golang-basics-context/">
        </link>
        <updated>2020-12-09T15:56:28.000Z</updated>
        <content type="html"><![CDATA[<h2 id="0x00">0x00</h2>
<p>在Go1.7发布时，标准库增加了一个<strong>context</strong>包，用来简化对于处理单个请求的多个goroutine之间与请求域的数据、超时和退出等操作。</p>
<h2 id="context包的应用">context包的应用</h2>
<h3 id="1-线程安全退出和超时控制">1. 线程安全退出和超时控制</h3>
<pre><code class="language-Go">// when the concurrent body timeout or 'main' actively stops the worker goroutine, each worker can safely exit
func worker(ctx context.Context, wg *sync.WaitGroup) error {
	defer wg.Done()

	for {
		select {
		case &lt;- ctx.Done():
            // exit
			return ctx.Err()
		default:
			fmt.Println(&quot;doing work...&quot;)
		}
	}
}

func main() {
	ctx, cancelFunc := context.WithTimeout(context.Background(), time.Second * 10)

	wg := &amp;sync.WaitGroup{}
	for i := 0; i &lt; 10; i++ {
		wg.Add(1)
		go func() {
			err := worker(ctx, wg)
			fmt.Println(&quot;err = &quot;, err)
		}()
	}

	time.Sleep(time.Second)
	cancelFunc()

	wg.Wait()
}
</code></pre>
<h3 id="2-防止后台goroutine内存泄漏">2. 防止后台goroutine内存泄漏</h3>
<p>虽然go语言自带垃圾回收，一般不会发生内存泄漏，但当main函数不再使用channel时，后台goroutine有泄漏风险。使用<strong>context</strong>包可以避免这样的情况发生(不需要使用sync.WaitGroup了)。例：</p>
<pre><code class="language-Go">func worker(ctx context.Context) error {
    for {
        select {
        case &lt;- ctx.Done():
            // exit
            return ctx.Err()
        default:
            fmt.Println(&quot;doing work...&quot;)
        }
    }
}

func main() {
    ctx, cancelFunc : = context.WithCancel(context.Background())
    wg := &amp;sync.WaitGroup{}
    for i := 0; i &lt; 10; i++ {
        go func() {
            err := worker(ctx)
        }()
    }

    /*
    * when the main function completes its work, it will calls cancelFunc() first,  
    * to notify the background Goroutine to exit, 
    * thus avoiding the leakage of Goroutine.
    */
    cancelFunc()
}
</code></pre>
<blockquote>
<p>References:<br>
<a href="https://chai2010.cn/advanced-go-programming-book/">Advanced Go Programming</a></p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Go语言并发编程模型(八) -- 并发的安全退出]]></title>
        <id>https://TomorrowTown.github.io/post/2020-12-09-golang-basics-concurrent-exit-safely/</id>
        <link href="https://TomorrowTown.github.io/post/2020-12-09-golang-basics-concurrent-exit-safely/">
        </link>
        <updated>2020-12-09T15:55:41.000Z</updated>
        <content type="html"><![CDATA[<h1 id="0x00">0x00</h1>
<p>当<strong>select</strong>有许多分支时，会随机选择一个可用的channel分支，若没有可用channel分支，则<strong>default</strong>分支将会被选择，否则会一直保持阻塞状态。</p>
<h2 id="select语句的应用">select语句的应用</h2>
<h3 id="1-超时判断">1. 超时判断</h3>
<pre><code class="language-Go">// choose one of the two, without default, either perform &quot;&lt;- in&quot; or timeout(channel is still empty after one second)
select {
case v := &lt;- in:
    // do something...
case &lt;- time.After(time.Second):
    // timeout, return
    return
}
</code></pre>
<h3 id="2-非阻塞channel的发送和接收操作">2. 非阻塞channel的发送和接收操作</h3>
<pre><code class="language-Go">select {
case v := &lt;- in:
    // do something
default:
    // there is no data in channel
}
</code></pre>
<h3 id="3-阻止main函数退出">3. 阻止main函数退出</h3>
<pre><code class="language-Go">func main() {
    // do something
    select {}   // keep blocking here
}
</code></pre>
<h3 id="4生成随机数序列">4.生成随机数序列</h3>
<p>当有多个channel可用时， select会随机选择一个可用的channel。基于此特性，我们可以实现一个随机数序列生成程序：</p>
<pre><code class="language-Go">func main() {
    ch := make(chan int)
    go func() {
        for {
            select {
            case ch &lt;- 0:
            case ch &lt;- 1:
            }
        }
    }()

    for v := range ch {
        // random output 0 and 1
        fmt.Println(v)
    }
}
</code></pre>
<h3 id="5协程退出控制">5.协程退出控制</h3>
<h4 id="1-关闭一个goroutine">(1) 关闭一个goroutine</h4>
<pre><code class="language-Go">func worker(cancel chan bool) {
	for {
		select {
		case &lt;- cancel:
			// exit
			fmt.Println(&quot;stop work...&quot;)
			return
		default:
			// do something...
			fmt.Println(&quot;doing some work...&quot;)
		}
	}
}

func main() {
	cancel := make(chan bool)
	go worker(cancel)

	time.Sleep(time.Second)
	cancel &lt;- true	// notify goroutine quit
}
</code></pre>
<h4 id="2-关闭多个goroutine">(2) 关闭多个goroutine</h4>
<p>使用**close()**方法关闭channel，使其达到广播的效果，select的所有接收channel分支都会在channel关闭时收到0值。</p>
<pre><code class="language-Go">func worker(cancel chan bool) {
	for {
		select {
		case v := &lt;- cancel:
			// exit
			fmt.Println(&quot;stop work... v = &quot;, v)
			return
		default:
			fmt.Println(&quot;doing work...&quot;)
		}
	}
}

func main() {
	cancel := make(chan bool)
	go worker(cancel)

	time.Sleep(time.Second)
	close(cancel)
}
</code></pre>
<p><strong>NOTE: <strong>由于goroutine在收到退出指令进行退出时会执行一定的清理工作，但是上述程序并不能够保证清理一定能够完成，所以为了保证程序的健壮性，我们需要使用</strong>sync.WaitGroup</strong>，以求main线程能够等待各个goroutine退出完成。</p>
<blockquote>
<p>References:<br>
<a href="https://chai2010.cn/advanced-go-programming-book/">Advanced Go Programming</a></p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Go语言并发编程模型(七) -- 控制并发数]]></title>
        <id>https://TomorrowTown.github.io/post/2020-12-09-golang-basics-control-the-number-of-concurrent/</id>
        <link href="https://TomorrowTown.github.io/post/2020-12-09-golang-basics-control-the-number-of-concurrent/">
        </link>
        <updated>2020-12-09T15:52:58.000Z</updated>
        <content type="html"><![CDATA[<h2 id="控制并发数的意义">控制并发数的意义</h2>
<p>适当地控制并发数，能够为其他程序提供可供使用的CPU资源，也可以节省能耗。<br>
对于细粒度的并发程序而言，CSP模型中的消息传递机制的开销是非常大的(多线程并发模型不可避免地会面对线程启动的开销)。</p>
<h2 id="使用有缓冲channel实现groutine的并发数控制">使用有缓冲channel实现groutine的并发数控制</h2>
<p>一个简单的示例：</p>
<pre><code class="language-Go">package main

import (
	&quot;fmt&quot;
	&quot;runtime&quot;
	&quot;sync&quot;
)

var ch chan bool

func worker() {
	fmt.Println(&quot;test&quot;)
	&lt;- ch
}

func main() {
	wg := &amp;sync.WaitGroup{}
	ch = make(chan bool, 10)
	for i := 0; i &lt; 1000; i++ {
		wg.Add(1)
		ch &lt;- true
		go worker()
		wg.Done()
	}
	fmt.Println(&quot;runtime goroutine num = &quot;, runtime.NumGoroutine())
	wg.Wait()
}
</code></pre>
<p>这样，同时运行的goroutine就控制在了10个。</p>
<blockquote>
<p>References:<br>
<a href="https://chai2010.cn/advanced-go-programming-book/">Advanced Go Programming</a></p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Go语言并发编程模型(六) -- 发布订阅模型]]></title>
        <id>https://TomorrowTown.github.io/post/2020-12-08-golang-basics-publish-and-subscribe-model/</id>
        <link href="https://TomorrowTown.github.io/post/2020-12-08-golang-basics-publish-and-subscribe-model/">
        </link>
        <updated>2020-12-08T15:52:10.000Z</updated>
        <content type="html"><![CDATA[<h2 id="0x00">0x00</h2>
<p>相比于生产者消费者模型而言，消息的生产者在发布订阅模型中充当了消息的发布者(publisher)，消息的消费者充当了消息的订阅者(subscriber)。<br>
在传统的生产者消费者模型中，消息被发送到一个队列中，而在发布订阅模型中，消息被发布给一个主题(topic)。<br>
在发布订阅模型中，每一个消息都被传递给多个订阅者。发布者通常不知道也不关心哪个订阅者收到了主题消息。发布者和订阅者可以在运行时动态地添加，是一种松散的耦合关系，这使得系统地复杂性会随着时间的推移而增长。</p>
<h2 id="一个支持多主题的pub-sub库的简易实现">一个支持多主题的pub-sub库的简易实现</h2>
<pre><code class="language-Go">package main

import (
	&quot;fmt&quot;
	&quot;strings&quot;
	&quot;sync&quot;
	&quot;time&quot;
)

type (
	// subscriber is a channel
	subscriber chan interface{}
	topicFunc  func(v interface{}) bool
)

// the publisher object
type Publisher struct {
	m               sync.RWMutex
	buffer          int                         // the cache size of subscription queue
	timeout         time.Duration               // publish timeout
	subscribers     map[subscriber]topicFunc    // subscriber information
}

func NewPublisher(timeout time.Duration, buffer int) *Publisher {
	return &amp;Publisher {
		buffer:       buffer,
		timeout:      timeout,
		subscribers:  make(map[subscriber]topicFunc),
	}
}

// add a new subscriber, subscribes all topic
func (p *Publisher) Subscribe() chan interface{} {
	return p.SubscribeTopic(nil)
}

// add a new subscriber, subscribes the topic filtrated by filter
func (p *Publisher) SubscribeTopic(topic topicFunc) chan interface{} {
	ch := make(chan interface{}, p.buffer)
	p.m.Lock()
	p.subscribers[ch] = topic
	p.m.Unlock()
	return ch
}

func (p *Publisher) Exit(sub chan interface{}) {
	p.m.Lock()
	defer p.m.Unlock()

	delete(p.subscribers, sub)
	close(sub)
}

// publish a topic
func (p *Publisher) Publish(v interface{}) {
	p.m.RLock()
	defer p.m.RUnlock()

	var wg sync.WaitGroup
	for sub, topic := range p.subscribers {
		wg.Add(1)
		go p.SendTopic(sub, topic, v, &amp;wg)
	}
    // wait for all goroutines excute finish
	wg.Wait()
}

// close publisher object, at the same time, close all the channel of subscribers
func (p *Publisher) Close() {
	p.m.Lock()
	defer p.m.Unlock()

	for sub := range p.subscribers {
		delete(p.subscribers, sub)
		close(sub)
	}
}

// send topic, can tolerate a certain timeout
func (p *Publisher) SendTopic(sub subscriber, topic topicFunc, v interface{}, wg *sync.WaitGroup) {
	defer wg.Done()
	if topic != nil &amp;&amp; !topic(v) {
		return
	}
	select {
	case sub &lt;- v:
		// ......
	case &lt;- time.After(p.timeout):
		// ......
	}
}

// test code ...
func main() {
	p := NewPublisher(time.Millisecond * 100, 10)
	defer p.Close()

	all := p.Subscribe()
	gTopic := p.SubscribeTopic(func(v interface{}) bool {
		if s, ok := v.(string); ok {
			return strings.Contains(s, &quot;golang&quot;)
		}
		return false
	})

	// pub
	p.Publish(&quot;hello world!&quot;)
	p.Publish(&quot;hello golang!&quot;)

	// sub
	go func() {
		for msg := range all {
			fmt.Println(&quot;all: &quot;, msg)
		}
	}()

	go func() {
		for msg := range gTopic {
			fmt.Println(&quot;golang: &quot;, msg)
		}
	}()

	// exit after a certain time
	time.Sleep(time.Second * 3)
}
</code></pre>
<blockquote>
<p>References:<br>
<a href="https://chai2010.cn/advanced-go-programming-book/">Advanced Go Programming</a></p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Go语言并发编程模型(五) -- 生产者消费者模型]]></title>
        <id>https://TomorrowTown.github.io/post/2020-12-07-golang-basics-producer-and-consumer-model/</id>
        <link href="https://TomorrowTown.github.io/post/2020-12-07-golang-basics-producer-and-consumer-model/">
        </link>
        <updated>2020-12-07T15:51:39.000Z</updated>
        <content type="html"><![CDATA[<p><strong>talk is cheap, show you the code:</strong></p>
<pre><code class="language-Go">// producer: generate a sequence of multiples of factor
func Producer(factor int, out chan &lt;- int) {
    for i := 0; ; i++ {
        out &lt;- i * factor
    }
} 

// consumer
func Consumer(in &lt;- chan int) {
    for v := range in {
        fmt.Println(v)
    }
}

func main() {
    ch := make(chan int, 64)    // result queue

    // the producers below are concurrency, therefore, the order of the result sequence output by the consumer is uncertain
    go Producer(3, ch)  // generate a sequence of multiples of 3, and put them into the ch
    go Producer(5, ch)  // generate a sequence of multiples of 5, and put them into the ch
    go Consumer(ch)  // consume the generated sequence
    
    // exit after a certain time, let producers and consumers work for a certain time
    // time.Sleep(time.Second * 5)
    
    /*
    * but the above sleep mode cannot guarantee stable output,
    * so we can let the main function save the blocked state without exiting
    * and only exit the program when the user enters &quot;Ctrl C&quot;
    */
    sig := make(chan os.Signal, 1)
    signal.Notify(sig, syscall.SIGINT, syscall.SIGTERM)
    fmt.Println(&quot;quit (%v)\n&quot;, &lt;- sig)
}
</code></pre>
<blockquote>
<p>References:<br>
<a href="https://chai2010.cn/advanced-go-programming-book/">Advanced Go Programming</a></p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Go语言并发编程模型(四) -- 基于管道的通信]]></title>
        <id>https://TomorrowTown.github.io/post/2020-12-04-golang-basics-channel-based-communication/</id>
        <link href="https://TomorrowTown.github.io/post/2020-12-04-golang-basics-channel-based-communication/">
        </link>
        <updated>2020-12-04T15:47:37.000Z</updated>
        <content type="html"><![CDATA[<h2 id="0x00">0x00</h2>
<p>依靠channel通信是不同goroutine之间同步的主要方法。</p>
<h2 id="无缓冲channel">无缓冲channel</h2>
<p>对于无缓冲channel而言，每一个发送操作(<strong>chan &lt;- x</strong>)都对应一个接收操作(<strong>&lt;- chan</strong>)，反之亦然。channel的发送和接收操作通常出现在不同的goroutine之间，如果放到同一个goroutine，则很容易出现死锁问题。<br>
使用示例：</p>
<pre><code class="language-Go">var done = make(chan bool)     // define an unbuffered channel, its len and cap always equal to 0
var msg string

func aGoroutine() {
    msg = &quot;hello world&quot;
    done &lt;- x   // sending operation, send a synchronization signal to channel
    // or use close(done) to replace done &lt;- false
}

func main() {
    go aGoroutine()
    &lt;- done     // receiving operation, receive the corresponding synchronization signal
    fmt.println(msg)
}
</code></pre>
<h2 id="有缓冲channel">有缓冲channel</h2>
<p>通过有缓冲channel的buffer大小，我们可以控制并发执行的goroutine的最大数量。例：</p>
<pre><code class="language-Go">var limit = make(chan int, 3)   // the channel with cache, length can be 0, 1, 2 or 3, capacity equals to 3

func main() {
    for _, w := range workerThread {
        go func() {
            limit &lt;- 1
            w()
            &lt;- limit
        }()
        select{}    // empty pipeline selcetion statement, means that only the channel be nil, the main thread can excute return
    }
}
</code></pre>
<p>上述程序允许的最大并发数为3。</p>
<blockquote>
<p><strong>Summary：</strong></p>
<ul>
<li>无缓冲channel：如果线程A向channel进行写操作，线程B尚未对该channel进行读操作，那么A线程将会被阻塞在写操作语句。相应的，如果线程A对一个线程进行读操作，线程B尚未对channel进行写操作，那么A线程将会阻塞在读操作语句。</li>
<li>有缓冲channel：只有当该channel的len==cap时，即该channel满了时，向该channel再进行写操作的化，写操作语句就会被阻塞。如果该channel中无数据(即len=0)，那么读该channel的语句将会被阻塞。</li>
<li>无缓冲channel：实现线程间同步。</li>
<li>有缓冲channel：线程间是异步的。</li>
<li>注意：如果对channel的读和写操作在同一个线程中进行，那么很容易造成读写互相等待，即死锁。</li>
</ul>
</blockquote>
<blockquote>
<p>References:<br>
<a href="https://chai2010.cn/advanced-go-programming-book/">Advanced Go Programming</a></p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Go语言并发编程模型(三) -- 顺序一致性内存模型]]></title>
        <id>https://TomorrowTown.github.io/post/2020-12-03-golang-basics-sequential-consistency-memory-model/</id>
        <link href="https://TomorrowTown.github.io/post/2020-12-03-golang-basics-sequential-consistency-memory-model/">
        </link>
        <updated>2020-12-03T15:47:13.000Z</updated>
        <content type="html"><![CDATA[<h2 id="0x00">0x00</h2>
<p>原子操作能够为线程之间的数据同步提供部分保证的前提是<strong>顺序一致性内存模型</strong>。<br>
<u><strong>线程间同步的本质就是为并发的事件进行排序</strong></u>。<br>
以下为一个顺序一致性内存模型：</p>
<pre><code class="language-Go">var a string
var done bool

func set() {
    a = &quot;hello world&quot;
    done = true
}

func main() {
    go set()
    for !done {}
    fmt.Println(a)
}
</code></pre>
<p>在Go语言中，<u>在同一个goroutine内的内存顺序模型能够得到保证</u>(在本例中即：go set()中的a赋值语句一定先于done赋值语句执行)。但是在不同的goroutine中，内存模型的顺序就不能单纯地通过书写顺序去保证了。假如在main线程书写一个done赋值语句，那么就无法保证go set()协程的done赋值语句和main线程的done赋值语句谁先执行了，那么print出来的a就可能为空。<br>
这是因为在Go中，<u>为了使并行最大化，go的编译器和处理器会对语句进行重排，同时CPU也可能会对指令集进行重排</u>。更糟糕的是，main线程可能无法察觉到set协程中的变量变化(可能始终在<a href="https://blog.csdn.net/yangyan1990/article/details/51078301">寄存器</a>内)，进而导致main线程死循环。如果并发程序不能确定事件发生的顺序，那么输出的结果也是不确定的，如以下这个程序：</p>
<pre><code class="language-Go">func main() {
    go fmt.Println(&quot;hello world&quot;)
}
</code></pre>
<p>由于goroutine和return事件是并发的，这两个事件谁都可能先发生，最终是否能打印出hello world也是无法确定的。</p>
<h2 id="使用同步原语进行同步">使用同步原语进行同步</h2>
<pre><code class="language-Go">func main() {
    done := make(chan int)
    go func() {
        fmt.Println(&quot;111&quot;)
        done &lt;- 1       // 同步语句 1
    }()
    &lt;- done              // 同步语句2
     fmt.Println(&quot;222&quot;)
}
</code></pre>
<p>done &lt;- 1：向channel传值；&lt;- done：从channel取值。<br>
<u>向channel传值取值先写谁都无所谓，因为传了没人取，和想取没人传，都会使channel阻塞</u>，<br>
因此同步语句2能够顺利执行(不阻塞)，就意味着同步语句1肯定执行了，又因为在一个goroutine中总能保证顺序一致性内存，因此在语句1执行之前，&quot;111&quot;肯定打印了，因此总能保证先打印&quot;111&quot;，再打印&quot;222&quot;。</p>
<h2 id="使用互斥量实现同步">使用互斥量实现同步</h2>
<pre><code class="language-Go">func main() {
    var mu sync.Mutex
    mu.Lock()
    go func() {
        fmt.Println(&quot;hello world&quot;)
        mu.Unlock()
    }()

    mu.Lock()
}
</code></pre>
<p>一个goroutine内的语句能够保证顺序一致性内存，所以打印语句必发生在Unlock()之前；在main线程中，先执行了第一个Lock()，那么通过sync.Mutex内部的保证，第二个Lock()必发生在goroutine中的Unlock()之后。因此能够保证该程序正常输出hello world。</p>
<blockquote>
<p>References:<br>
<a href="https://chai2010.cn/advanced-go-programming-book/">Advanced Go Programming</a></p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Go语言并发编程模型(二) -- 原子操作]]></title>
        <id>https://TomorrowTown.github.io/post/2020-12-02-golang-basics-atomic-operation/</id>
        <link href="https://TomorrowTown.github.io/post/2020-12-02-golang-basics-atomic-operation/">
        </link>
        <updated>2020-12-02T15:46:13.000Z</updated>
        <content type="html"><![CDATA[<h2 id="使用互斥锁实现原子操作">使用互斥锁实现原子操作</h2>
<p>通常，原子操作由“互斥”访问保证，通常由特殊的CPU指令保护。当然，如果只是想模拟粗粒度的原子操作，我们可以使用<strong>sync.Mutex</strong>来做到这一点。</p>
<pre><code class="language-Go">package main

import (
    &quot;sync&quot;
    &quot;fmt&quot;
)

var total struct {
    sync.Mutex
    value int
}

func worker(wg *sync.WaitGroup) {
    defer wg.Done()
    for i := 0; i &lt; 100; i++ {
        total.Lock()
        total.value += 1
        total.Unlock()
    }
}

func main() {
    var wg sync.WaitGroup
    wg.Add(2)
    go worker(&amp;wg)
    go worker(&amp;wg)
    wg.Wait()

    fmt.Println(total.value)    // 10100
}
</code></pre>
<h2 id="使用syncatomic实现原子操作">使用sync/atomic实现原子操作</h2>
<p>如上，使用互斥锁去保护数字共享资源既麻烦又低效。标准库中的<strong>sync/atomic</strong>包对此提供了丰富的支持。利用此包重新实现上面的例子：</p>
<pre><code class="language-Go">package main

import (
    &quot;sync&quot;
    &quot;sync/atomic&quot;
    &quot;fmt&quot;
)

var total uint64

func worker(wg *sync.WaitGroup) {
    defer wg.Done()
    for i := 0; i &lt;= 100; i++ {
        atomic.AddUnit64(&amp;total, i)
    }
}

func main() {
    var wg sync.WaitGroup
    wg.Add(2)
    go worker(&amp;wg)
    go worker(&amp;wg)
    wg.Wait()

    fmt.Println(total.value)    // 10100
}
</code></pre>
<h2 id="利用原子操作和互斥锁实现单例">利用原子操作和互斥锁实现单例</h2>
<p>原子操作和互斥锁可以实现非常高效的单例模式。互斥锁的开销比普通整数的原子读写要高得多。 在性能敏感的地方可以增加一个数字型的标志位，通过原子检测标志位状态降低互斥锁的使用次数来提高性能。</p>
<pre><code class="language-Go">type singleton struct {}

var (
    instance    *singleton
    initialized   uint32
    mu              sync.Mutex
)

func GetInst() *singleton {
    if atomic.LoadUint32(&amp;initialized) == 1 {
        return instance
    }

    mu.Lock()
    defer mu.Unlock()

    if instance == nil {
        defer atomic.StoreUint32(&amp;initialized, 1)
        instance = &amp;singleton {}
    }

    return instance
}
</code></pre>
<p>将上例中的公共部分提取出来就是标准库中的 <strong>sync.Once</strong>包。<strong>sync.Once</strong>源码如下所示：</p>
<pre><code class="language-Go">type Once struct {
    m      mutex
    done uint32
}

func (o *Once) Do(f func()) {
    if atomic.LoadUint32(&amp;o.Done) == 1 {
        return
    }
    o.m.Lock()
    defer o.m.Unlock()

    if o.done == 0 {
        defer atomic.StoreUint32(&amp;o.done, 1)
        f()
    }
}
</code></pre>
<p>现在，基于<strong>sync.Once</strong>重新实现单例模式：</p>
<pre><code class="language-Go">var (
    instance    *singleton
    once          sync.Once
)

func GetInst() *singleton {
    once.Do(func() {
        instance = &amp;singleton{}
    })
    return instance
}
</code></pre>
<h2 id="load-store">Load &amp; Store</h2>
<p><strong>atomic.Value</strong>对象提供了<strong>Load</strong>和<strong>Store</strong>两种方法，用于加载和保存数据。其返回值和参数均为**interface{}**类型，所以这两种方法可以用于自定义的任何复杂结构。</p>
<pre><code class="language-Go">/* This is a simplified producer-consumer model: back-end thread generate the latest configuration; multiple worker threads in the front-end get the latest configuration. All threads share configuration resources. */

// save the current configuration
var conf atomic.Value

// initialize the configuration
conf.Store(loadConfig())

// start a backend thread, load the updated configuration
go func() {
    for {
        time.Sleep(time.Second)
        conf.Store(loadConfig())
    }
}

// the worker threads used to process requests, always use the latest configuration
for i := 0; i &lt; 10; i++ {
    go func() {
        for r := range requests() {
            c := conf.Load()
        }
    }()
}
</code></pre>
<blockquote>
<p>References:<br>
<a href="https://chai2010.cn/advanced-go-programming-book/">Advanced Go Programming</a></p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Go语言并发编程模型(一) -- 开篇]]></title>
        <id>https://TomorrowTown.github.io/post/2020-12-01-golang-basics-introductory-remarks/</id>
        <link href="https://TomorrowTown.github.io/post/2020-12-01-golang-basics-introductory-remarks/">
        </link>
        <updated>2020-11-29T15:17:26.000Z</updated>
        <content type="html"><![CDATA[<h2 id="0x00">0x00</h2>
<p>首先看一下并发与并行的区别：<br>
并发：注意力更多地集中于设计层面，并发程序能够被顺序执行；<br>
并行：注意力更多地集中于运行层面，并发程序一般是大量简单重复的运算。<br>
在早期，CPU在一个单核中顺序地执行机器指令，所以早期地编程语言是一种顺序地编程语言：所有地指令都以串行地方式执行。当单核CPU的频率达到极限时，就会出现多核处理器，相应的，编程语言也需要朝着并行的方向发展。<br>
在并发编程中，对资源的精确访问需要精确的控制。在大多数语言中，这个困难的问题是通过锁和其他同步解决方案来解决的。但在golang中有另一种方式，它将共享的值通过channel传递。在任何时刻，最好只有一个goroutine可以拥有该资源。数据竞争在设计层面被消除。<br>
常用的并发编程模型有多线程模型、消息传递模型等。golang是基于消息并发实现其并发特性的，其将CSP并发编程模型内置到了语言中。与Erlang不同的是，golang的goroutine是由<strong>go</strong>这个关键字创建的共享内存。<br>
Golang并发编程的slogan：</p>
<blockquote>
<p>Do not communicate by sharing memory; instead, share memory by communicating.</p>
</blockquote>
<h2 id="go协程与系统线程">go协程与系统线程</h2>
<p>go协程(goroutine)是一种轻量级的线程。启动一个go协程，不仅简单如调用一个函数，而且启动的开销非常小，协程之间的调度成本也非常低。</p>
<h3 id="go协程与系统线程的差别">go协程与系统线程的差别</h3>
<p>go协程与系统线程的差别只是一个变量，但正是这个变量的区别导致了go并发编程的质的飞跃。<br>
**系统级线程：**具有固定的栈大小(通常默认是2MB)，该栈主要用于在递归调用函数时保存参数和局部变量。固定栈大小会导致两个问题：一是对许多只需要少量栈空间的线程来说是一种巨大的浪费；二是需要大量栈空间的线程会面临栈溢出的风险。<br>
**go协程：**goroutine以一个非常小的栈启动，栈大小不固定，可动态伸缩(最多为1GB)。因此启动成本非常小，所以可以启动成千上万个goroutine。</p>
<h3 id="goroutine的调度器">goroutine的调度器</h3>
<p>goroutine采用半抢占式的协作调度，只有在当前goroutine被阻塞时才会导致调度。同时，它发生在用户模式下。调度器会根据具体函数只保存必要的寄存器，切换成本远低于系统线程。运行时有一个<strong>runtime.GOMAXPROCS</strong>变量，用于控制当前运行正常非阻塞Goroutine的系统线程数。<br>
关于goroutine的调度器的详细说明请参阅：&lt;(https://tonybai.com/2017/06/23/an-intro-about-goroutine-scheduler/&gt;</p>
<blockquote>
<p>References:<br>
<a href="https://chai2010.cn/advanced-go-programming-book/">Advanced Go Programming</a></p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Go语言基础(二) -- string]]></title>
        <id>https://TomorrowTown.github.io/post/2020-11-29-golang-basics-string/</id>
        <link href="https://TomorrowTown.github.io/post/2020-11-29-golang-basics-string/">
        </link>
        <updated>2020-11-29T13:48:29.000Z</updated>
        <content type="html"><![CDATA[<p>与数组不同，字符串中的元素是不可修改的，字符串是一个<strong>只读</strong>字节数组。<u>虽然字符串的长度一旦固定就不可修改，但长度并不是字符串类型的一部分</u>。<br>
由于Go的源码需要UTF8编码，所以出现在Go源码中的字符串常量通常是UTF8编码的。<br>
golang中的字符串底层数据结构为<strong>reflect.StringHeader：</strong></p>
<pre><code class="language-Go">type StringHeader struct {
    Data uintptr
    Len  int
}
</code></pre>
<p>The string structure consisits of two pieces of information: the first is the underlying byte array pointed by the string, and the second is the length of the string in bytes. The string is actually a structure, so the assignment of the string is the copy process of the <strong>reflect.StringHeader</strong> structure, and does not involve the copy of the underlying byte array.<br>
字符串结构包含两段信息：第一段是字符串所指向的底层字节数组；第二段是字符串的字节长度。字符串实际上是一个结构，所以字符串的赋值是 <strong>reflect.StringHeader</strong>结构的拷贝过程，修改赋值后的字符串并不会改变源字符串。<br>
<em>字符串&quot;Hello, World&quot; 对应的内存结构如图：</em><br>
<img src="https://TomorrowTown.github.io/post-images/1606658790160.png" alt="" loading="lazy"></p>
<p>虽然字符串不是切片，但是也支持针对切片的操作：</p>
<pre><code class="language-Go">s := &quot;hello, world&quot;
hello := s[:5]
world := s[7:]
</code></pre>
<p>字符串可以转换成<strong>byte[]</strong> 和 <strong>rune[]</strong>，且可使用<strong>for range</strong> 去遍历字符串。</p>
<blockquote>
<p>References:<br>
<a href="https://chai2010.cn/advanced-go-programming-book/">Advanced Go Programming</a></p>
</blockquote>
]]></content>
    </entry>
</feed>